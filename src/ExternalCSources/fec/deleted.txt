// from https://github.com/wangyu-/UDPspeeder/blob/3375c6ac9d7de0540789483e964658746e245634/lib/fec.cpp
int i ;
    fprintf(stderr,"GF_SIZE is %d\n",GF_SIZE);
    /*
     * test gf tables. Sufficiently tested...
     */
    for (i=0; i<= GF_SIZE; i++) {
        if (gf_exp[gf_log[i]] != i)
            fprintf(stderr, "bad exp/log i %d log %d exp(log) %d\n",
                    i, gf_log[i], gf_exp[gf_log[i]]);

        if (i != 0 && gf_mul(i, inverse[i]) != 1)
            fprintf(stderr, "bad mul/inv i %d inv %d i*inv(i) %d\n",
                    i, inverse[i], gf_mul(i, inverse[i]) );
        if (gf_mul(0,i) != 0)
            fprintf(stderr, "bad mul table 0,%d\n",i);
        if (gf_mul(i,0) != 0)
            fprintf(stderr, "bad mul table %d,0\n",i);
        // Consti10
        gf res=gf_mul(1,i);
        if (res != i)
            fprintf(stderr, "bad mul table 1,%d result: %d\n",i,res);
        res=gf_mul(i,1);
        if (res != i)
            fprintf(stderr, "bad mul table %d,1 result: %d\n",i,res);
    }
    for(i=0;i<GF_SIZE;i++){
        for(int j=0;j<GF_SIZE;j++){
            gf res;
            mul(&res,(const gf*)&i,j,1);
            assert(res==gal_mul(i,j));
            //assert(res== gf256_mul(j,i));
            /*{
                auto lol=gf256_mul(i,j);
                if(res != lol){
                    printf("XX %d %d\n",res,lol);
                }else{
                    printf("Okay\n");
                }
            }*/
        }
    }
    for(i=0;i<GF_SIZE;i++){
        for(int j=0;j<GF_SIZE;j++){
            for(int k=0;k<GF_SIZE;k++){
                gf res=k;
                addmul(&res,(const gf*)&i,j,1);
                assert(res== gal_madd(k,j,i));
            }
        }
    }
    /*for(i=0;i<GF_SIZE;i++){
        std::cout<<i<<"\t";
        for(int j=0;j<10;j++){
            //printf("%d or: %d other: %d\n",i,gf_mul(i,j),gf256_mul(i,j));
            std::cout<<"["<<(int)gf_mul(i,j)<<","<<(int)gf256_mul(i,j)<<"]";
        }
        std::cout<<"\n";
    }*/